//task 1. –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–ª–∞—Å Employee, –≤ —è–∫–æ–º—É –±—É–¥—É—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ - —ñ–º'—è (name) , –≤—ñ–∫ (age), –∑–∞—Ä–ø–ª–∞—Ç–∞ (salary).
//f.e –ó—Ä–æ–±—ñ—Ç—å —Ç–∞–∫, —â–æ–± —Ü—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∑–∞–ø–æ–≤–Ω—é–≤–∞–ª–∏—Å—è –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–±'—î–∫—Ç–∞.
//f.e –ó—Ä–æ–±—ñ—Ç—å –ø–æ–ª–µ salary –ø—Ä–∏–≤–∞—Ç–Ω–∏–º —Ç–∞ —Å—Ç–≤–æ—Ä—ñ—Ç—å –≥–µ—Ç—Ç–µ—Ä–∏ —Ç–∞ —Å–µ—Ç—Ç–µ—Ä–∏ –¥–ª—è –Ω—å–æ–≥–æ
//f.e –ó—Ä–æ–±—ñ—Ç—å –∫–ª–∞—Å Programmer, —è–∫–∏–π –±—É–¥–µ —É—Å–ø–∞–¥–∫–æ–≤–∞–Ω–∏–π –≤—ñ–¥ –∫–ª–∞—Å—É Employee, —É —è–∫–æ–º—É –±—É–¥–µ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å langs (—Å–ø–∏—Å–æ–∫ –º–æ–≤)
//f.e –î–ª—è –∫–ª–∞—Å—Å–∞ Programmer –ø–µ—Ä–µ–∑–∞–ø–∏—à–∏—Ç–µ –≥–µ—Ç—Ç–µ—Ä –¥–ª—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ salary. –•–∞–π –≤—ñ–Ω –ø–æ–≤–µ—Ä—Ç–∞—î –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å salary, –ø–æ–º–Ω–æ–∂–µ–Ω–µ –Ω–∞ 3.
//f.e –°—Ç–≤–æ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫–∞ –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ–≤ –æ–±'—î–∫—Ç–∞ Programmer, –≤–∏–≤–µ–¥—ñ—Ç—å —ó—Ö —É –∫–æ–Ω—Å–æ–ª—å.

// class Employee {
// 	#salary;

// 	constructor({ name, age, salary }) {
// 		this.name = name;
// 		this.age = age;
// 		this.#salary = salary; //works if u don't define the salary when initialize( #salary before the constructor), so u need to write this here in constructor to destructurize and difine in the variable that u get from function argument
// 	}

// 	get salary() {
// 		return this.#salary;
// 	}

// 	set salary(newSalary) {
// 		return (this.#salary = newSalary);
// 	}
// }

// class Programmer extends Employee {
// 	// constructor({ name, age, salary, langs }) {
// 	// 	super({ name, age, salary });
// 	//better to write this way if you don't need the parent's class variables:
// 	constructor({ langs, ...restObj }) {
// 		super(restObj);
// 		this.langs = langs;
// 	}

// 	get salary() {
// 		return super.salary * 3;
// 	}
// }

// // c: Take a note that you need to use () first and only then, inside write and object with {}
// // works Because new is a function, fo u need this (). The new obj will return on this place.
// // //works so under sceens: console.log(worker.__proto__ === Programmer.prototype) // true
// // c: Object.getPrototypeOf(worker) –±–æ–ª–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å, —á–µ–º worker.__proto__
// const worker = new Programmer({
// 	name: "Duke",
// 	age: 32,
// 	salary: 1200,
// 	langs: ["js", "java", "python"],
// });

// console.log(worker);
// console.log(worker.salary);
//-------------------------

// task 2. –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª–∞—Å—Å —Ç–æ–≤–∞—Ä—É Product, —É —è–∫–æ–º—É –±—É–¥—É—Ç—å —Ç–∞–∫—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ:
//f.e     - –∫–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞;
//f.e     - –ø–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞;
//f.e     - –æ–ø–∏—Å
//f.e     - —Ü—ñ–Ω–∞;
//f.e (–º–∞—î —Ç–∞–∫–æ–∂ –±—É—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è —Ç–æ–≤–∞—Ä—É);
//
//task –ê —Ç–∞–∫–æ–∂ –º–µ—Ç–æ–¥–∏:
// f.e    - —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏ (–ø—Ä–∏–≤–∞—Ç–Ω–∏–π, –∞—Ä–≥—É–º–µ–Ω—Ç - –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫—â–æ –±—ñ–ª—å—à–µ 20 - —Ç–æ–¥—ñ –∑–Ω–∏–∂–∫–∞ –Ω–∞ –≤—Å—é —Å—É–º—É - 15 –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤);

//f.e     - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É (–º–µ—Ç–æ–¥ - –ø—Ä–∏–≤–∞—Ç–Ω–∏–π, –∞—Ä–≥—É–º–µ–Ω—Ç–∏ - –∞–¥—Ä–µ—Å–∞, —Ü—ñ–Ω–∞ –∑–∞ –≤—Å–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –¶—ñ–Ω–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –æ–±—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è —Ç–∞–∫ ‚Äì  1% –≤—ñ–¥ —Ü—ñ–Ω–∏, —è–∫—â–æ —Ü—ñ–Ω–∞ –±—ñ–ª—å—à–µ 2000 - –¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ);

//f.e     - –¥—Ä—É–∫ —á–µ–∫—É (–ø—Ä–∏–≤–∞—Ç–Ω–∏–π, —Ü–µ–π –º–µ—Ç–æ–¥ –æ—Ç—Ä–∏–º—É—î –æ–±'—î–∫—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å) // {address: '–∞–¥—Ä–µ—Å–∞', price: 0}

// f.e    - –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ( –ø—É–±–ª—ñ—á–Ω–∏–π, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—é —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É,–¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–∞ –≥–µ–Ω–µ—Ä—É—î –æ–±'—î–∫—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
//f.e       { –∞–¥—Ä–µ—Å–∞, —Ç–æ–≤–∞—Ä, –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —Ü—ñ–Ω–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É, —Ü—ñ–Ω–∞ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è}) // –ø—Ä–∏–π–º–∞—î: a–¥—Ä–µ—Å–∞, –∫—ñ–ª—å–∫—ñ—Å—Ç—å

//
// class Product {
// 	#id = Math.random();

// 	constructor({ shortName, fullName, description, price }) {
// 		this.shortName = shortName;
// 		this.fullName = fullName;
// 		this.description = description;
// 		this.price = price;
// 	}

// 	#countPrice(quantity) {
// 		const priceOfOrder = this.price * quantity; //? –º–æ–∂–Ω–∞ —ñ –Ω–µ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—É (–ø—Ä–æ—Å—Ç–æ —â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –º–Ω–æ–∂–µ–Ω–Ω—è —ñ –≤ true,  —ñ –≤ false)
// 		// if (quantity > 20) {
// 		// 	return priceOfOrder * 0.85;
// 		// }
// 		// return priceOfOrder;
// 		return quantity > 20 ? priceOfOrder * 0.85 : priceOfOrder;
// 	}

// 	#getDeliveryInfo(address, priceOfOrder) {
// 		return {
// 			address,
// 			deliveryPrice: priceOfOrder > 2000 ? 0 : priceOfOrder * 0.01,
// 		};
// 	}

// 	#printCheck(order) {
// 		console.log("Order: ", order);
// 	}

// 	getProductInfo(address, quantity) {
// 		const priceOfOrder = this.#countPrice(quantity);
// 		const deliveryInfoObj = this.#getDeliveryInfo(address, priceOfOrder).deliveryPrice;
// 		const orderObj = {
// 			priceOfOrder,
// 			...deliveryInfoObj,
// 			product: this,
// 			quantity, //fix üëáif write: deliveryInfoObj.deliveryPrice don't work for some reason :(
// 			totalPrice: priceOfOrder + this.#getDeliveryInfo(address, priceOfOrder).deliveryPrice,
// 		};
// 		this.#printCheck(orderObj);
// 		return orderObj;
// 		// return { address, shortName, quantity, price, deliveryPrice, totalPrice };
// 	}
// }

// const product = new Product({
// 	shortName: "iPhone",
// 	fullName: "iPhone 12 mini",
// 	description: "super new phone",
// 	price: 800,
// });

// const order = product.getProductInfo("Kharkiv", 2);
// console.log(order);
//-------------------------

// task 3. –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª–∞—Å Vehicle, —É —è–∫–æ–º—É –±—É–¥–µ 4 –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ:
//f.e - currentSpeed ( –ø—Ä–∏–≤–∞—Ç–Ω–∞ )
//f.e - maxSpeed ( —Å—Ç–∞—Ç–∏—á–Ω–∞ )
//f.e - year,
//f.e - country
//f.e - weight
//f.e - –º–µ—Ç–æ–¥ info() { –ø–æ—Ä–æ–∂–Ω—ñ–π }

//task –°—Ç–≤–æ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–ª–∞—Å–∏
//f.e 1) Car (—É—Å—ñ –ø–æ–ª—è –≤—ñ–¥ Vehicle + type, name, model, wheels) + –º–µ—Ç–æ–¥–∞–º–∏
//f.e -info (–æ–ø–∏—Å—É—î –ø–æ–≤–µ–¥—ñ–Ω–∫—É –∞–≤—Ç–æ),
//f.e -travelTime( –æ–±—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Å—É —è–∫–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è –ø–æ–¥–æ–ª–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω—ñ –∑–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ currentSpeed,
//f.e        –≤—ñ–¥—Å—Ç–∞–Ω—å –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤ —Å–∞–º –º–µ—Ç–æ–¥ )

// class Vehicle {
// 	#currentSpeed;
// 	static maxSpeed = 450;

// 	constructor({ year, country, weight, currentSpeed } = {}) {
// 		this.year = year;
// 		this.country = country;
// 		this.weight = weight;
// 		this.#currentSpeed = currentSpeed;
// 	}

// 	get currentSpeed() {
// 		return this.#currentSpeed;
// 	}

// 	set currentSpeed(newSpeed) {
// 		this.#currentSpeed = newSpeed;
// 	}

// 	info() {}
// }

// class Car extends Vehicle {
// 	constructor({ type, name, model, wheels, ...restProps }) {
// 		super(restProps);
// 		this.type = type;
// 		this.name = name;
// 		this.wheels = wheels;
// 	}

// 	info() {
// 		console.log("Car can ride");
// 	}

// 	travelTime(km) {
// 		return (km / super.currentSpeed).toFixed();
// 	}
// 	//c: if you want to call parents object value => then write with super.value ...not this.value
// 	//works: when need to get a private value from the super, don't  need to use #
// }

// const car1 = new Car({
// 	name: "BMW",
// 	model: "X5",
// 	type: "sedan",
// 	wheels: 4,
// 	year: 2020,
// 	country: "Germany",
// 	weight: 4.5,
// 	currentSpeed: 150,
// });

// console.log(car1);
// car1.info(); //no need in console.log because function doesn't return anything and console.log's message inside.
// console.log(car1.travelTime(4000));

// //f.e 2) AirPlane (—É—Å—ñ –ø–æ–ª—è –≤—ñ–¥ Vehicle + type, name, engine, private oldEngines) + –º–µ—Ç–æ–¥–∏)
// //f.e -info (–æ–ø–∏—Å—É—î –ø–æ–≤–µ–¥—ñ–Ω–∫—É –ª—ñ—Ç–∞–∫–∞),
// //f.e -updateEngine ( –∑–∞–º—ñ–Ω—è—î –ø–æ—Ç–æ—á–Ω–∏–π –¥–≤–∏–≥—É–Ω –ª—ñ—Ç–∞–∫–∞ –Ω–∞ —Ç–æ–π –¥–≤–∏–≥—É–Ω, —è–∫–∏–π –ø—Ä–∏–π—à–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —É –º–µ—Ç–æ–¥, —Ç–∞ –¥–æ–¥–∞—î —Å—Ç–∞—Ä–∏–π –¥–≤–∏–≥—É–Ω
// //f.e                 —É –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–ª–µ oldEngines )
// //f.e -showAllEngines ( –≤–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Å—Ç–∞—Ä–∏—Ö –¥–≤–∏–≥—É–Ω—ñ–≤ –ª—ñ—Ç–∞–∫–∞ —Ç–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ )

// class AirPlane extends Vehicle {
// 	#oldEngines = [];
// 	constructor({ type, name, engine, ...restProps }) {
// 		super(restProps);
// 		this.type = type;
// 		this.name = name;
// 		this.engine = engine;
// 	}

// 	info() {
// 		console.log("Airplane can fly");
// 	}

// 	updateEngine(newEngine) {
// 		this.#oldEngines.push(this.engine);
// 		console.log(`Old engines: ${this.#oldEngines.join(", ")}`);

// 		this.engine = newEngine;
// 		console.log(`New engine ${this.engine}`);
// 	}
// }

// const airplane1 = new AirPlane({
// 	type: "passanger's",
// 	name: "Mriya",
// 	engine: " GT- 825",
// 	year: 1991,
// 	country: "Ukraine",
// 	weight: 100,
// 	currentSpeed: 600,
// });

// console.log(airplane1);
// airplane1.updateEngine("HY-345e");
// airplane1.updateEngine("MT-45em");

// //task 3) Ship (—É—Å—ñ –ø–æ–ª—è –≤—ñ–¥ Vehicle + type, name, engine, color, passengers: {name, age, ticket} [] ( –ø—Ä–∏–≤–∞—Ç–Ω–µ ) ) + –º–µ—Ç–æ–¥–∏)
// //f.e  -info (–æ–ø–∏—Å—É—î –ø–æ–≤–µ–¥—ñ–Ω–∫—É –∫–æ—Ä–∞–±–ª—è),
// //f.e  -addPassenger ( —è–∫—â–æ –ø–∞—Å–∞–∂–∏—Ä–∞ —â–µ –Ω–µ–º–∞—î –Ω–∞ –±–æ—Ä—Ç—É ‚Äì –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ —É —Å–ø–∏—Å–æ–∫ passengers, —è–∫—â–æ —î –≤–∏–≤–µ—Å—Ç–∏ –ø–æ–º–∏–ª–∫—É )
// class Ship extends Vehicle {
// 	#passengers = [];

// 	constructor({ type, name, engine, color, ...restProps }) {
// 		super(restProps);
// 		this.type = type;
// 		this.name = name;
// 		this.engine = engine;
// 		this.color = color;
// 	}

// 	info() {
// 		console.log("Ship can float");
// 	}

// 	addPassenger(newPassenger) {
// 		console.log(this.#passengers);

// 		//c: don't forget to compare concrete key values in obj, because two objects can never be equal to each other
// 		return this.#passengers.find(({ ticket }) => ticket === newPassenger.ticket)
// 			? alert(`Passenger ${newPassenger.name}, ticket: ${newPassenger.ticket} already exists`)
// 			: this.#passengers.push(newPassenger);
// 	}
// }

// const ship1 = new Ship({
// 	type: "crouise",
// 	name: "Freedom",
// 	engine: "KMJ-987klj",
// 	color: "silver",
// 	year: 2008,
// 	country: "Italy",
// 	weight: 800,
// 	currentSpeed: 120,
// });

// console.log(ship1);
// ship1.addPassenger({ name: "Pavlo", age: 28, ticket: 1 });
// ship1.addPassenger({ name: "Davis", age: 38, ticket: 2 });
// ship1.addPassenger({ name: "Pavlo", age: 28, ticket: 1 });

//-------------------------
